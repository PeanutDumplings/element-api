// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "elements",
    columns: [
      { name: "atomicNumber", type: "int" },
      { name: "symbol", type: "string" },
      { name: "name", type: "string" },
      { name: "atomicMass", type: "float" },
      { name: "cpkHexColor", type: "string" },
      { name: "electronicConfiguration", type: "string" },
      { name: "electronegativity", type: "float" },
      { name: "atomicRadius", type: "int" },
      { name: "ionRadius", type: "string" },
      { name: "vanDerWaalsRadius", type: "int" },
      { name: "ionizationEnergy", type: "int" },
      { name: "electronAffinity", type: "int" },
      { name: "oxidationStates", type: "multiple" },
      { name: "standardState", type: "string" },
      { name: "bondingType", type: "string" },
      { name: "meltingPoint", type: "int" },
      { name: "boilingPoint", type: "int" },
      { name: "density", type: "float" },
      { name: "groupBlock", type: "string" },
      { name: "yearDiscovered", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Elements = InferredTypes["elements"];
export type ElementsRecord = Elements & XataRecord;

export type DatabaseSchema = {
  elements: ElementsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://element-api-fc9j34.ap-southeast-2.xata.sh/db/api",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
